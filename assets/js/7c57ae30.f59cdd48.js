"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[4561],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(r),u=o,g=c["".concat(s,".").concat(u)]||c[u]||f[u]||i;return r?n.createElement(g,a(a({ref:t},d),{},{components:r})):n.createElement(g,a({ref:t},d))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:o,a[1]=p;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},75908:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const i={id:"polygonid-js-sdk.iproofservice",title:"IProofService interface",hide_title:!0},a=void 0,p={unversionedId:"api/polygonid-js-sdk.iproofservice",id:"api/polygonid-js-sdk.iproofservice",title:"IProofService interface",description:"IProofService interface",source:"@site/docs/api/polygonid-js-sdk.iproofservice.md",sourceDirName:"api",slug:"/api/polygonid-js-sdk.iproofservice",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice",draft:!1,tags:[],version:"current",frontMatter:{id:"polygonid-js-sdk.iproofservice",title:"IProofService interface",hide_title:!0},sidebar:"api",previous:{title:"IProofService.generateProof() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice.generateproof"},next:{title:"IProofService.transitState() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice.transitstate"}},s={},l=[{value:"IProofService interface",id:"iproofservice-interface",level:2},{value:"Methods",id:"methods",level:2}],d={toc:l};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"iproofservice-interface"},"IProofService interface"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Signature:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface IProofService \n")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Method"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice.generateauthv2inputs"},"generateAuthV2Inputs(hash, did, profileNonce, circuitId)")),(0,o.kt)("td",{parentName:"tr",align:null},"generates auth inputs")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice.generateproof"},"generateProof(proofReq, identifier, credential, opts)")),(0,o.kt)("td",{parentName:"tr",align:null},"Generate proof from given identity and credential for protocol proof request")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice.transitstate"},"transitState(did, oldTreeState, isOldStateGenesis, stateStorage, ethSigner)")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("p",null,"transitState is done always to the latest state"),(0,o.kt)("p",null,"Generates a state transition proof and publishes state to the blockchain"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice.verifyproof"},"verifyProof(zkp, circuitName)")),(0,o.kt)("td",{parentName:"tr",align:null},"Verification of zkp proof for given circuit id")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iproofservice.verifystate"},"verifyState(circuitId, pubSignals)")),(0,o.kt)("td",{parentName:"tr",align:null},"state verification function")))))}c.isMDXComponent=!0}}]);