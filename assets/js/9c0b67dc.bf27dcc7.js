"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[7131],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},y=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),y=r,u=c["".concat(s,".").concat(y)]||c[y]||g[y]||o;return n?i.createElement(u,a(a({ref:t},p),{},{components:n})):i.createElement(u,a({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var d=2;d<o;d++)a[d]=n[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}y.displayName="MDXCreateElement"},473:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=n(7462),r=(n(7294),n(3905));const o={id:"polygonid-js-sdk.iidentitystorage.getallidentities",title:"IIdentityStorage.getAllIdentities() method",hide_title:!0},a=void 0,l={unversionedId:"api/polygonid-js-sdk.iidentitystorage.getallidentities",id:"api/polygonid-js-sdk.iidentitystorage.getallidentities",title:"IIdentityStorage.getAllIdentities() method",description:"IIdentityStorage.getAllIdentities() method",source:"@site/docs/api/polygonid-js-sdk.iidentitystorage.getallidentities.md",sourceDirName:"api",slug:"/api/polygonid-js-sdk.iidentitystorage.getallidentities",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitystorage.getallidentities",draft:!1,tags:[],version:"current",frontMatter:{id:"polygonid-js-sdk.iidentitystorage.getallidentities",title:"IIdentityStorage.getAllIdentities() method",hide_title:!0},sidebar:"api",previous:{title:"IdentityWallet.signChallenge() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.identitywallet.signchallenge"},next:{title:"IIdentityStorage.getIdentity() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitystorage.getidentity"}},s={},d=[{value:"IIdentityStorage.getAllIdentities() method",id:"iidentitystoragegetallidentities-method",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"iidentitystoragegetallidentities-method"},"IIdentityStorage.getAllIdentities() method"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,r.kt)("p",null,"gets all identity from the data source"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"getAllIdentities(): Promise<Identity[]>;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")),(0,r.kt)("p",null,"Promise","<",(0,r.kt)("a",{parentName:"p",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.identity"},"Identity"),"[","]",">"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"{Promise<Identity[]>}")))}c.isMDXComponent=!0}}]);