"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[43033],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>y});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),c=p(r),u=l,y=c["".concat(d,".").concat(u)]||c[u]||m[u]||i;return r?n.createElement(y,o(o({ref:t},s),{},{components:r})):n.createElement(y,o({ref:t},s))}));function y(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=r.length,o=new Array(i);o[0]=u;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a[c]="string"==typeof e?e:l,o[1]=a;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},22215:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=r(87462),l=(r(67294),r(3905));const i={id:"polygonid-js-sdk.identitywallet.getdidtreemodel",title:"IdentityWallet.getDIDTreeModel() method",hide_title:!0},o=void 0,a={unversionedId:"api/polygonid-js-sdk.identitywallet.getdidtreemodel",id:"api/polygonid-js-sdk.identitywallet.getdidtreemodel",title:"IdentityWallet.getDIDTreeModel() method",description:"IdentityWallet.getDIDTreeModel() method",source:"@site/docs/api/polygonid-js-sdk.identitywallet.getdidtreemodel.md",sourceDirName:"api",slug:"/api/polygonid-js-sdk.identitywallet.getdidtreemodel",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.identitywallet.getdidtreemodel",draft:!1,tags:[],version:"current",frontMatter:{id:"polygonid-js-sdk.identitywallet.getdidtreemodel",title:"IdentityWallet.getDIDTreeModel() method",hide_title:!0},sidebar:"api",previous:{title:"IdentityWallet.getCoreClaimFromCredential() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.identitywallet.getcoreclaimfromcredential"},next:{title:"IdentityWallet.issueCredential() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.identitywallet.issuecredential"}},d={},p=[{value:"IdentityWallet.getDIDTreeModel() method",id:"identitywalletgetdidtreemodel-method",level:2},{value:"Parameters",id:"parameters",level:2}],s={toc:p};function c(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"identitywalletgetdidtreemodel-method"},"IdentityWallet.getDIDTreeModel() method"),(0,l.kt)("p",null,"Gets a tree model for given did that includes claims tree, revocation tree, the root of roots tree and calculated state hash"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"getDIDTreeModel(did: DID): Promise<TreesModel>;\n")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"did"),(0,l.kt)("td",{parentName:"tr",align:null},"DID"),(0,l.kt)("td",{parentName:"tr",align:null},"did which trees info we need to receive")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")),(0,l.kt)("p",null,"Promise","<","TreesModel",">"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise<TreesModel>")))}c.isMDXComponent=!0}}]);