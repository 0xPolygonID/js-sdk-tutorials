"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[25424],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),p=r,g=u["".concat(l,".").concat(p)]||u[p]||h[p]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:5},i="Handle authorization request",s={unversionedId:"tutorial-basics/auth-handler",id:"tutorial-basics/auth-handler",title:"Handle authorization request",description:"Tutorial shows how to handle authorization request and",source:"@site/docs/tutorial-basics/auth-handler.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/auth-handler",permalink:"/polygonid-js-sdk-website/docs/tutorial-basics/auth-handler",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"generate sig / mtp proofs",permalink:"/polygonid-js-sdk-website/docs/tutorial-basics/generate proofs"}},l={},c=[{value:"handle auth request",id:"handle-auth-request",level:3}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"handle-authorization-request"},"Handle authorization request"),(0,r.kt)("p",null,"Tutorial shows how to handle authorization request and  "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"codebase can be changed. Still in @beta ")),(0,r.kt)("h3",{id:"handle-auth-request"},"handle auth request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'  console.log("=============== handle auth request ===============");\n\n  const dataStorage = initDataStorage();\n  const credentialWallet = await initCredentialWallet(dataStorage);\n  const identityWallet = await initIdentityWallet(\n    dataStorage,\n    credentialWallet\n  );\n  const circuitStorage = await initCircuitStorage();\n  const proofService = await initProofService(\n    identityWallet,\n    credentialWallet,\n    dataStorage.states,\n    circuitStorage\n  );\n\n  const { did: userDID, credential: authBJJCredentialUser } =\n    await identityWallet.createIdentity(\n      "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n      "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n      {\n        method: core.DidMethod.Iden3,\n        blockchain: core.Blockchain.Polygon,\n        networkId: core.NetworkId.Mumbai,\n      }\n    );\n\n  console.log("=============== user did ===============");\n  console.log(userDID.toString());\n\n  const { did: issuerDID, credential: issuerAuthBJJCredential } =\n    await identityWallet.createIdentity(\n      "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n      "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n      {\n        method: core.DidMethod.Iden3,\n        blockchain: core.Blockchain.Polygon,\n        networkId: core.NetworkId.Mumbai,\n      }\n    );\n\n  const credentialRequest: CredentialRequest = {\n    credentialSchema:\n      "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json",\n    type: "KYCAgeCredential",\n    credentialSubject: {\n      id: userDID.toString(),\n      birthday: 19960424,\n      documentType: 99,\n    },\n    expiration: 12345678888,\n  };\n  const credential = await identityWallet.issueCredential(\n    issuerDID,\n    credentialRequest,\n    "http://metamask.com/", // host url that will a prefix of credential identifier\n    {\n      withRHS: "https://rhs-staging.polygonid.me", // reverse hash service is used to check\n    }\n  );\n\n  dataStorage.credential.saveCredential(credential);\n\n  console.log(\n    "================= generate Iden3SparseMerkleTreeProof ======================="\n  );\n\n  const res = await identityWallet.addCredentialsToMerkleTree(\n    [credential],\n    issuerDID\n  );\n\n  console.log("================= push states to rhs ===================");\n\n  await identityWallet.publishStateToRHS(\n    issuerDID,\n    "https://rhs-staging.polygonid.me"\n  );\n\n  console.log("================= publish to blockchain ===================");\n\n  const ethSigner = new ethers.Wallet(\n    "",\n    (dataStorage.states as EthStateStorage).provider\n  );\n  const txId = await proofService.transitState(\n    issuerDID,\n    res.oldTreeState,\n    true,\n    dataStorage.states,\n    ethSigner\n  );\n  console.log(txId);\n\n  console.log(\n    "================= generate credentialAtomicSigV2 ==================="\n  );\n\n  const proofReqSig: ZeroKnowledgeProofRequest = {\n    id: 1,\n    circuitId: CircuitId.AtomicQuerySigV2,\n    optional: false,\n    query: {\n      allowedIssuers: ["*"],\n      type: credentialRequest.type,\n      context:\n        "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld",\n      credentialSubject: {\n        documentType: {\n          $eq: 99,\n        },\n      },\n    },\n  };\n\n  console.log("=================  credential auth request ===================");\n\n  // auth request\n\n  var authRequest: AuthorizationRequestMessage = {\n    id: "fe6354fe-3db2-48c2-a779-e39c2dda8d90",\n    thid: "fe6354fe-3db2-48c2-a779-e39c2dda8d90",\n    typ: constants.MediaType.PlainMessage,\n    from: issuerDID.toString(),\n    type: constants.PROTOCOL_MESSAGE_TYPE.AUTHORIZATION_REQUEST_MESSAGE_TYPE,\n    body: {\n      callbackUrl: "http://testcallback.com",\n      message: "message to sign",\n      scope: [proofReqSig],\n      reason: "verify age",\n    },\n  };\n  console.log(JSON.stringify(authRequest));\n\n  const credsWithIden3MTPProof =\n    await identityWallet.generateIden3SparseMerkleTreeProof(\n      issuerDID,\n      res.credentials,\n      txId\n    );\n\n  console.log(credsWithIden3MTPProof);\n  credentialWallet.saveAll(credsWithIden3MTPProof);\n\n  const proofReqMtp: ZeroKnowledgeProofRequest = {\n    id: 1,\n    circuitId: CircuitId.AtomicQueryMTPV2,\n    optional: false,\n    query: {\n      allowedIssuers: ["*"],\n      type: credentialRequest.type,\n      context:\n        "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld",\n      credentialSubject: {\n        birthday: {\n          $lt: 20020101,\n        },\n      },\n    },\n  };\n\n  var authRawRequest = new TextEncoder().encode(JSON.stringify(authRequest));\n\n  // * on the user side */\n\n  console.log("============== handle auth request ==============");\n  const authV2Data = await circuitStorage.loadCircuitData(CircuitId.AuthV2);\n  let pm = await initPackageManager(\n    authV2Data,\n    proofService.generateAuthV2Inputs.bind(proofService),\n    proofService.verifyState.bind(proofService)\n  );\n\n  const authHandler = new AuthHandler(pm, proofService, credentialWallet);\n  const authHandlerRequest =\n    await authHandler.handleAuthorizationRequestForGenesisDID(\n      userDID,\n      authRawRequest\n    );\n  console.log(authHandlerRequest);\n\n')))}u.isMDXComponent=!0}}]);