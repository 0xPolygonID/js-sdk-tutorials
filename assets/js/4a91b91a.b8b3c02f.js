"use strict";(self.webpackChunkjs_sdk_tutorials=self.webpackChunkjs_sdk_tutorials||[]).push([[25424],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),p=a,g=u["".concat(l,".").concat(p)]||u[p]||h[p]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:5},i="Handle authorization request",s={unversionedId:"tutorial-basics/auth-handler",id:"tutorial-basics/auth-handler",title:"Handle authorization request",description:"Tutorial shows how to handle authorization request and",source:"@site/docs/tutorial-basics/auth-handler.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/auth-handler",permalink:"/js-sdk-tutorials/docs/tutorial-basics/auth-handler",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"generate sig / mtp proofs",permalink:"/js-sdk-tutorials/docs/tutorial-basics/generate proofs"}},l={},c=[{value:"transit your first state",id:"transit-your-first-state",level:3}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handle-authorization-request"},"Handle authorization request"),(0,a.kt)("p",null,"Tutorial shows how to handle authorization request and  "),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"codebase can be changed. Still in @beta ")),(0,a.kt)("h3",{id:"transit-your-first-state"},"transit your first state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  console.log("=============== handle auth request ===============");\n  \n  const dataStorage = initDataStorage();\n  const credentialWallet = await initCredentialWallet(dataStorage);\n  const identityWallet = await initIdentityWallet(\n    dataStorage,\n    credentialWallet\n  );\n  const circuitStorage = await initCircuitStorage();\n  const proofService = await initProofService(identityWallet,credentialWallet,dataStorage.states,circuitStorage)\n\n  const { did:userDID, credential:authBJJCredentialUser } =\n    await identityWallet.createIdentity(\n      "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n      "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n      {\n        method: core.DidMethod.Iden3,\n        blockchain: core.Blockchain.Polygon,\n        networkId: core.NetworkId.Mumbai,\n      }\n    );\n\n  console.log("=============== user did ===============");\n  console.log(userDID.toString());\n\n  const { did:issuerDID, credential:issuerAuthBJJCredential } =\n    await identityWallet.createIdentity(\n      "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n      "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n      {\n        method: core.DidMethod.Iden3,\n        blockchain: core.Blockchain.Polygon,\n        networkId: core.NetworkId.Mumbai,\n      }\n    );\n\n  const credentialRequest: CredentialRequest = {\n    credentialSchema:\n      "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json",\n    type: "KYCAgeCredential",\n    credentialSubject: {\n      id: userDID.toString(),\n      birthday: 19960424,\n      documentType: 99,\n    },\n    expiration: 12345678888,\n  };\n  const credential = await identityWallet.issueCredential(\n    issuerDID,\n    credentialRequest,\n    "http://metamask.com/", // host url that will a prefix of credential identifier\n    {\n      withRHS: "https://rhs-staging.polygonid.me", // reverse hash service is used to check\n    }\n  );\n\n\n  dataStorage.credential.saveCredential(credential)\n\n\n  console.log("================= generate Iden3SparseMerkleTreeProof =======================")\n\n  const res = await identityWallet.addCredentialsToMerkleTree([credential], issuerDID);\n\n  console.log("================= push states to rhs ===================")\n\n  await identityWallet.publishStateToRHS(issuerDID, "https://rhs-staging.polygonid.me");\n\n  console.log("================= publish to blockchain ===================")\n\n  const ethSigner = new ethers.Wallet(\'<your private key>\',(dataStorage.states as EthStateStorage).provider);\n  const txId = await proofService.transitState(\n    issuerDID,\n    res.oldTreeState,\n    true,\n    dataStorage.states,\n    ethSigner\n  );\n  console.log(txId)\n\n  console.log("================= generate credentialAtomicSigV2 ===================")\n\n  const proofReqSig: ZeroKnowledgeProofRequest = {\n    id: 1,\n    circuitId: CircuitId.AtomicQuerySigV2,\n    optional: false,\n    query: {\n      allowedIssuers: [\'*\'],\n      type: credentialRequest.type,\n      context:\n        \'https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\',\n      req: {\n        documentType: {\n          $eq: 99\n        }\n      }\n    }\n  };\n\n  console.log("=================  credential auth request ===================");\n\n\n\n  // auth request\n\n  \n  var authRequest: AuthorizationRequestMessage = {\n    id : \'fe6354fe-3db2-48c2-a779-e39c2dda8d90\',\n    thid:   \'fe6354fe-3db2-48c2-a779-e39c2dda8d90\',\n    typ: constants.MediaType.PlainMessage,\n    from: issuerDID.toString(),\n    type: constants.PROTOCOL_MESSAGE_TYPE.AUTHORIZATION_REQUEST_MESSAGE_TYPE,\n    body: {\n      callbackUrl:\'http://testcallback.com\',\n      message:\'message to sign\',\n      scope:[proofReqSig],\n      reason:\'verify age\'\n    }\n  }\n  console.log(JSON.stringify(authRequest));\n  \n  \n\n    const credsWithIden3MTPProof = await identityWallet.generateIden3SparseMerkleTreeProof(\n      issuerDID,\n      res.credentials,\n      txId\n    );\n\n    console.log(credsWithIden3MTPProof)\n    credentialWallet.saveAll(credsWithIden3MTPProof);\n\n    const proofReqMtp: ZeroKnowledgeProofRequest = {\n      id: 1,\n      circuitId: CircuitId.AtomicQueryMTPV2,\n      optional: false,\n      query: {\n        allowedIssuers: [\'*\'],\n        type: credentialRequest.type,\n        context:\n          \'https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\',\n        req: {\n          birthday: {\n            $lt: 20020101\n          }\n        }\n      }\n    };\n\n\n\n\n  var authRawRequest = new TextEncoder().encode(JSON.stringify(authRequest));\n\n\n\n  // * on the user side */\n\n\n  console.log("============== handle auth request ==============")\n  const authV2Data = await circuitStorage.loadCircuitData(CircuitId.AuthV2);\n  let pm = await initPackageManager(authV2Data,proofService.generateAuthV2Inputs.bind(proofService),proofService.verifyState.bind(proofService))\n\n  const authHandler = new AuthHandler(pm,proofService);\n  const authHandlerRequest = await authHandler.handleAuthorizationRequest(userDID,authRawRequest);\n  console.log(authHandlerRequest);\n\n')))}u.isMDXComponent=!0}}]);