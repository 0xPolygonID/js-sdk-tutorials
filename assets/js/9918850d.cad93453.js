"use strict";(self.webpackChunkjs_sdk_tutorials=self.webpackChunkjs_sdk_tutorials||[]).push([[14353],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),p=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(r),c=a,f=m["".concat(o,".").concat(c)]||m[c]||u[c]||i;return r?n.createElement(f,s(s({ref:t},d),{},{components:r})):n.createElement(f,s({ref:t},d))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},94293:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={id:"js-sdk.ldparser.getprefixes",title:"LDParser.getPrefixes() method",hide_title:!0},s=void 0,l={unversionedId:"api/js-sdk.ldparser.getprefixes",id:"api/js-sdk.ldparser.getprefixes",title:"LDParser.getPrefixes() method",description:"LDParser.getPrefixes() method",source:"@site/docs/api/js-sdk.ldparser.getprefixes.md",sourceDirName:"api",slug:"/api/js-sdk.ldparser.getprefixes",permalink:"/js-sdk-tutorials/docs/api/js-sdk.ldparser.getprefixes",draft:!1,tags:[],version:"current",frontMatter:{id:"js-sdk.ldparser.getprefixes",title:"LDParser.getPrefixes() method",hide_title:!0},sidebar:"api",previous:{title:"LDParser.extractTerms() method",permalink:"/js-sdk-tutorials/docs/api/js-sdk.ldparser.extractterms"},next:{title:"LDParser class",permalink:"/js-sdk-tutorials/docs/api/js-sdk.ldparser"}},o={},p=[{value:"LDParser.getPrefixes() method",id:"ldparsergetprefixes-method",level:2},{value:"Parameters",id:"parameters",level:2}],d={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"ldparsergetprefixes-method"},"LDParser.getPrefixes() method"),(0,a.kt)("p",null,'GetPrefixesreturns a map of potential RDF prefixes based on the JSON-LD Term Definitions in this context. No guarantees of the prefixes are given, beyond that it will not contain ":".'),(0,a.kt)("p",null,'onlyCommonPrefixes: If true, the result will not include "not so useful" prefixes, such as "term1": "',(0,a.kt)("a",{parentName:"p",href:"http://example.com/term1%22"},'http://example.com/term1"'),', e.g. all IRIs will end with "/" or "',"#",'". If false, all potential prefixes are returned.'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Signature:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"static getPrefixes(context: string | JSON, onlyCommonPrefixes: boolean, properties?: Array<string>): Promise<Map<string, string>>;\n")),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"context"),(0,a.kt)("td",{parentName:"tr",align:null},"string ","|"," JSON"),(0,a.kt)("td",{parentName:"tr",align:null},"JSONLD context")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"onlyCommonPrefixes"),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"only common prefixes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"properties"),(0,a.kt)("td",{parentName:"tr",align:null},"Array","<","string",">"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"(Optional)")," available properties in type definition")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")),(0,a.kt)("p",null,"Promise","<","Map","<","string, string",">",">"),(0,a.kt)("p",null,"Promise","<","<","Map","<","string, string",">",">"))}m.isMDXComponent=!0}}]);