"use strict";(self.webpackChunkjs_sdk_tutorials=self.webpackChunkjs_sdk_tutorials||[]).push([[25424],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,g=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:5},i="Handle authorization request",s={unversionedId:"tutorial-basics/auth-handler",id:"tutorial-basics/auth-handler",title:"Handle authorization request",description:"Tutorial shows how to handle authorization request and",source:"@site/docs/tutorial-basics/auth-handler.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/auth-handler",permalink:"/js-sdk-tutorials/docs/tutorial-basics/auth-handler",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Generate sig / mtp proofs",permalink:"/js-sdk-tutorials/docs/tutorial-basics/generate proofs"}},c={},l=[{value:"handle authorization request: flow without usage of profiles",id:"handle-authorization-request-flow-without-usage-of-profiles",level:3}],u={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"handle-authorization-request"},"Handle authorization request"),(0,r.kt)("p",null,"Tutorial shows how to handle authorization request and  "),(0,r.kt)("h3",{id:"handle-authorization-request-flow-without-usage-of-profiles"},"handle authorization request: flow without usage of profiles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'  console.log("=============== handle auth request ===============");\n  \n  const dataStorage = initDataStorage();\n  const credentialWallet = await initCredentialWallet(dataStorage);\n  const identityWallet = await initIdentityWallet(\n    dataStorage,\n    credentialWallet\n  );\n  const circuitStorage = await initCircuitStorage();\n  const proofService = await initProofService(identityWallet,credentialWallet,dataStorage.states,circuitStorage)\n\n  const { did:userDID, credential:authBJJCredentialUser } =\n     await wallet.createIdentity({\n      method: DidMethod.Iden3,\n      blockchain: Blockchain.Polygon,\n      networkId: NetworkId.Mumbai,\n      seed: seedPhrase,\n      revocationOpts: {\n        type: CredentialStatusType.Iden3ReverseSparseMerkleTreeProof,\n        id: "https://rhs-staging.polygonid.me"\n      }\n    });\n\n  console.log("=============== user did ===============");\n  console.log(userDID.string());\n\n  const { did:issuerDID, credential:issuerAuthBJJCredential } =\n    await wallet.createIdentity({\n      method: DidMethod.Iden3,\n      blockchain: Blockchain.Polygon,\n      networkId: NetworkId.Mumbai,\n      seed: seedPhrase,\n      revocationOpts: {\n        type: CredentialStatusType.Iden3ReverseSparseMerkleTreeProof,\n        id: "https://rhs-staging.polygonid.me"\n      }\n    });\n\n  const credentialRequest: CredentialRequest = {\n      credentialSchema:\n        "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json",\n      type: "KYCAgeCredential",\n      credentialSubject: {\n        id: userDID.string(),\n        birthday: 19960424,\n        documentType: 99,\n      },\n      expiration: 12345678888,\n      revocationOpts: {\n        type: CredentialStatusType.Iden3ReverseSparseMerkleTreeProof,\n        id: "https://rhs-staging.polygonid.me"\n      }\n    };\n\n  const credential = await identityWallet.issueCredential(issuerDID, credentialRequest);\n\n\n  await dataStorage.credential.saveCredential(credential)\n\n\n  console.log("================= generate Iden3SparseMerkleTreeProof =======================")\n\n  const res = await identityWallet.addCredentialsToMerkleTree([credential], issuerDID);\n\n  console.log("================= push states to rhs ===================")\n\n  await identityWallet.publishStateToRHS(issuerDID, "https://rhs-staging.polygonid.me");\n\n  console.log("================= publish to blockchain ===================")\n\n  const ethSigner = new ethers.Wallet(\'<your private key>\',(dataStorage.states as EthStateStorage).provider);\n  const txId = await proofService.transitState(\n    issuerDID,\n    res.oldTreeState,\n    true,\n    dataStorage.states,\n    ethSigner\n  );\n  console.log(txId)\n\n  console.log("================= generate credentialAtomicSigV2 ===================")\n\n  const proofReqSig: ZeroKnowledgeProofRequest = {\n    id: 1,\n    circuitId: CircuitId.AtomicQuerySigV2,\n    optional: false,\n    query: {\n      allowedIssuers: [\'*\'],\n      type: credentialRequest.type,\n      context:\n        \'https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\',\n      req: {\n        documentType: {\n          $eq: 99\n        }\n      }\n    }\n  };\n\n  console.log("=================  credential auth request ===================");\n\n\n\n  // auth request\n\n  \n  var authRequest: AuthorizationRequestMessage = {\n    id : \'fe6354fe-3db2-48c2-a779-e39c2dda8d90\',\n    thid:   \'fe6354fe-3db2-48c2-a779-e39c2dda8d90\',\n    typ: PROTOCOL_CONSTANTS.MediaType.PlainMessage,\n    from: issuerDID.string(),\n    type: PROTOCOL_CONSTANTS.PROTOCOL_MESSAGE_TYPE.AUTHORIZATION_REQUEST_MESSAGE_TYPE,\n    body: {\n      callbackUrl:\'http://testcallback.com\',\n      message:\'message to sign\',\n      scope:[proofReqSig],\n      reason:\'verify age\'\n    }\n  }\n  console.log(JSON.stringify(authRequest));\n  \n  \n\n    const credsWithIden3MTPProof = await identityWallet.generateIden3SparseMerkleTreeProof(\n      issuerDID,\n      res.credentials,\n      txId\n    );\n\n    console.log(credsWithIden3MTPProof)\n    credentialWallet.saveAll(credsWithIden3MTPProof);\n\n    const proofReqMtp: ZeroKnowledgeProofRequest = {\n      id: 1,\n      circuitId: CircuitId.AtomicQueryMTPV2,\n      optional: false,\n      query: {\n        allowedIssuers: [\'*\'],\n        type: credentialRequest.type,\n        context:\n          \'https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\',\n        req: {\n          birthday: {\n            $lt: 20020101\n          }\n        }\n      }\n    };\n\n\n\n\n  var authRawRequest = new TextEncoder().encode(JSON.stringify(authRequest));\n\n\n\n  // * on the user side */\n\n\n  console.log("============== handle auth request ==============")\n  const authV2Data = await circuitStorage.loadCircuitData(CircuitId.AuthV2);\n  let pm = await initPackageManager(authV2Data,proofService.generateAuthV2Inputs.bind(proofService),proofService.verifyState.bind(proofService))\n\n  const authHandler = new AuthHandler(pm,proofService,credentialWallet);\n  const authHandlerRequest = await authHandler.handleAuthorizationRequest(userDID,authRawRequest);\n  console.log(authHandlerRequest);\n\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 ",(0,r.kt)("i",null,"package manager ")," is needed to pack / unpack envelops with zkp or jws. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export async function initPackageManager(\n  circuitData: CircuitData,\n  prepareFn: AuthDataPrepareFunc,\n  stateVerificationFn: StateVerificationFunc\n): Promise<IPackageManager> {\n  const authInputsHandler = new DataPrepareHandlerFunc(prepareFn);\n\n  const verificationFn = new VerificationHandlerFunc(stateVerificationFn);\n  const mapKey =\n    proving.provingMethodGroth16AuthV2Instance.methodAlg.toString();\n  const verificationParamMap: Map<string, VerificationParams> = new Map([\n    [\n      mapKey,\n      {\n        key: circuitData.verificationKey,\n        verificationFn,\n      },\n    ],\n  ]);\n\n  const provingParamMap: Map<string, ProvingParams> = new Map();\n  provingParamMap.set(mapKey, {\n    dataPreparer: authInputsHandler,\n    provingKey: circuitData.provingKey,\n    wasm: circuitData.wasm,\n  });\n\n  const mgr: IPackageManager = new PackageManager();\n  const packer = new ZKPPacker(provingParamMap, verificationParamMap);\n  const plainPacker = new PlainPacker();\n  mgr.registerPackers([packer, plainPacker]);\n\n  return mgr;\n}\n")))}d.isMDXComponent=!0}}]);