"use strict";(self.webpackChunkjs_sdk_tutorials=self.webpackChunkjs_sdk_tutorials||[]).push([[19740],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,y=u["".concat(l,".").concat(g)]||u[g]||p[g]||i;return n?r.createElement(y,o(o({ref:t},d),{},{components:n})):r.createElement(y,o({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},83826:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:2},o="Transit state",s={unversionedId:"tutorial-basics/transit-state",id:"tutorial-basics/transit-state",title:"Transit state",description:"State transition is a process of publishing the new issuer state after the claim is added to the claim tree.",source:"@site/docs/tutorial-basics/transit-state.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/transit-state",permalink:"/js-sdk-tutorials/docs/tutorial-basics/transit-state",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Issue credential",permalink:"/js-sdk-tutorials/docs/tutorial-basics/issue-credential"},next:{title:"Generate sig / mtp proofs",permalink:"/js-sdk-tutorials/docs/tutorial-basics/generate proofs"}},l={},c=[{value:"transit your first state",id:"transit-your-first-state",level:3},{value:"init proof service",id:"init-proof-service",level:3}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"transit-state"},"Transit state"),(0,a.kt)("p",null,"State transition is a process of publishing the new issuer state after the claim is added to the claim tree."),(0,a.kt)("h3",{id:"transit-your-first-state"},"transit your first state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'async function transitState() {\n    console.log("=============== transit state ===============");\n  \n    const dataStorage = initDataStorage();\n    const credentialWallet = await initCredentialWallet(dataStorage);\n    const identityWallet = await initIdentityWallet(\n      dataStorage,\n      credentialWallet\n    );\n    const proofService = await initProofService(identityWallet,credentialWallet,dataStorage.states)\n  \n    const { did:userDID, credential:authBJJCredentialUser } =\n      await identityWallet.createIdentity({\n      method: DidMethod.Iden3,\n      blockchain: Blockchain.Polygon,\n      networkId: NetworkId.Mumbai,\n      seed: seedPhrase,\n      revocationOpts: {\n        type: CredentialStatusType.Iden3ReverseSparseMerkleTreeProof,\n        id: "https://rhs-staging.polygonid.me"\n      }\n    });\n  \n    console.log("=============== user did ===============");\n    console.log(userDID.string());\n  \n    const { did:issuerDID, credential:issuerAuthBJJCredential } =\n      await identityWallet.createIdentity({\n        method: DidMethod.Iden3,\n        blockchain: Blockchain.Polygon,\n        networkId: NetworkId.Mumbai,\n        seed: seedPhrase,\n        revocationOpts: {\n          type: CredentialStatusType.Iden3ReverseSparseMerkleTreeProof,\n          id: "https://rhs-staging.polygonid.me"\n        }\n      };\n  \n    const credentialRequest: CredentialRequest = {\n      credentialSchema:\n        "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json",\n      type: "KYCAgeCredential",\n      credentialSubject: {\n        id: userDID.string(),\n        birthday: 19960424,\n        documentType: 99,\n      },\n      expiration: 12345678888,\n      revocationOpts: {\n        type: CredentialStatusType.Iden3ReverseSparseMerkleTreeProof,\n        id: "https://rhs-staging.polygonid.me"\n      }\n    };\n    const credential = await identityWallet.issueCredential(\n      issuerDID,\n      credentialRequest\n    );\n  \n  \n    await dataStorage.credential.saveCredential(credential)\n\n\n    console.log("================= generate Iden3SparseMerkleTreeProof =======================")\n\n    const res = await identityWallet.addCredentialsToMerkleTree([credential], issuerDID);\n\n    console.log("================= push states to rhs ===================")\n\n    await identityWallet.publishStateToRHS(issuerDID, "https://rhs-staging.polygonid.me");\n\n    console.log("================= publish to blockchain ===================")\n\n    const ethSigner = new ethers.Wallet(\' < your private key here >\',(dataStorage.states as EthStateStorage).provider);\n    const txId = await proofService.transitState(\n      issuerDID,\n      res.oldTreeState,\n      true,\n      dataStorage.states,\n      ethSigner\n    );\n\n     console.log("================= transaction hash ===================")\n    console.log(txId)\n\n  }\n\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 you also need to use ethers wallet to be able to sign transaction!")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f be careful with private keys")),(0,a.kt)("h3",{id:"init-proof-service"},"init proof service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"async function initProofService(\n    identityWallet:IIdentityWallet,\n    credentialWallet:ICredentialWallet,\n    stateStorage:IStateStorage\n) :Promise<ProofService>{\n    const circuitStorage = new CircuitStorage(new InMemoryDataSource<CircuitData>());\n\n    const loader = new FSKeyLoader(path.join(__dirname, '../testdata'));\n\n   \n    await circuitStorage.saveCircuitData(CircuitId.StateTransition, {\n      circuitId: CircuitId.StateTransition,\n      wasm: await loader.load(`${CircuitId.StateTransition.toString()}/circuit.wasm`),\n      provingKey: await loader.load(`${CircuitId.StateTransition.toString()}/circuit_final.zkey`),\n      verificationKey: await loader.load(\n        `${CircuitId.StateTransition.toString()}/verification_key.json`\n      )\n    });\n\n    return new ProofService(identityWallet, credentialWallet, circuitStorage, stateStorage);\n\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 ",(0,a.kt)("i",null,"CircuitStorage ")," Contains proving key of state transition circuit which is need for proof generation")))}u.isMDXComponent=!0}}]);