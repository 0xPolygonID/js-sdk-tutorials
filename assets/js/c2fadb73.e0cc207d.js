"use strict";(self.webpackChunkjs_sdk_tutorials=self.webpackChunkjs_sdk_tutorials||[]).push([[19740],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),c=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},u="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,l=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),u=c(n),f=r,g=u["".concat(l,".").concat(f)]||u[f]||p[f]||i;return n?a.createElement(g,o(o({ref:e},d),{},{components:n})):a.createElement(g,o({ref:e},d))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=f;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[u]="string"==typeof t?t:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},83826:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:2},o="transit state",s={unversionedId:"tutorial-basics/transit-state",id:"tutorial-basics/transit-state",title:"transit state",description:"State transition is a process of publishing the new issuer state after the claim is added to the claim tree.",source:"@site/docs/tutorial-basics/transit-state.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/transit-state",permalink:"/docs/tutorial-basics/transit-state",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Issue credential",permalink:"/docs/tutorial-basics/issue-credential"},next:{title:"generate sig / mtp proofs",permalink:"/docs/tutorial-basics/generate proofs"}},l={},c=[{value:"transit your first state",id:"transit-your-first-state",level:3},{value:"init proof service",id:"init-proof-service",level:3}],d={toc:c};function u(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transit-state"},"transit state"),(0,r.kt)("p",null,"State transition is a process of publishing the new issuer state after the claim is added to the claim tree."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"codebase can be changed. Still in @beta ")),(0,r.kt)("h3",{id:"transit-your-first-state"},"transit your first state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'async function transitState() {\n    console.log("=============== transit state ===============");\n  \n    const dataStorage = initDataStorage();\n    const credentialWallet = await initCredentialWallet(dataStorage);\n    const identityWallet = await initIdentityWallet(\n      dataStorage,\n      credentialWallet\n    );\n    const proofService = await initProofService(identityWallet,credentialWallet,dataStorage.states)\n  \n    const { did:userDID, credential:authBJJCredentialUser } =\n      await identityWallet.createIdentity(\n        "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n        "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n        {\n          method: core.DidMethod.Iden3,\n          blockchain: core.Blockchain.Polygon,\n          networkId: core.NetworkId.Mumbai,\n        }\n      );\n  \n    console.log("=============== user did ===============");\n    console.log(userDID.toString());\n  \n    const { did:issuerDID, credential:issuerAuthBJJCredential } =\n      await identityWallet.createIdentity(\n        "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n        "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n        {\n          method: core.DidMethod.Iden3,\n          blockchain: core.Blockchain.Polygon,\n          networkId: core.NetworkId.Mumbai,\n        }\n      );\n  \n    const credentialRequest: CredentialRequest = {\n      credentialSchema:\n        "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json",\n      type: "KYCAgeCredential",\n      credentialSubject: {\n        id: userDID.toString(),\n        birthday: 19960424,\n        documentType: 99,\n      },\n      expiration: 12345678888,\n    };\n    const credential = await identityWallet.issueCredential(\n      issuerDID,\n      credentialRequest,\n      "http://metamask.com/", // host url that will a prefix of credential identifier\n      {\n        withRHS: "https://rhs-staging.polygonid.me", // reverse hash service is used to check\n      }\n    );\n  \n  \n    dataStorage.credential.saveCredential(credential)\n\n\n    console.log("================= generate Iden3SparseMerkleTreeProof =======================")\n\n    const res = await identityWallet.addCredentialsToMerkleTree([credential], issuerDID);\n\n    console.log("================= push states to rhs ===================")\n\n    await identityWallet.publishStateToRHS(issuerDID, "https://rhs-staging.polygonid.me");\n\n    console.log("================= publish to blockchain ===================")\n\n    const ethSigner = new ethers.Wallet(\' < your private key here >\',(dataStorage.states as EthStateStorage).provider);\n    const txId = await proofService.transitState(\n      issuerDID,\n      res.oldTreeState,\n      true,\n      dataStorage.states,\n      ethSigner\n    );\n\n     console.log("================= transaction hash ===================")\n    console.log(txId)\n\n  }\n\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 you also need to use ethers wallet to be able to sign transaction!")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f be careful with private keys")),(0,r.kt)("h3",{id:"init-proof-service"},"init proof service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"async function initProofService(\n    identityWallet:IIdentityWallet,\n    credentialWallet:ICredentialWallet,\n    stateStorage:IStateStorage\n) :Promise<ProofService>{\n    const circuitStorage = new CircuitStorage(new InMemoryDataSource<CircuitData>());\n\n    const loader = new FSKeyLoader(path.join(__dirname, '../testdata'));\n\n   \n    await circuitStorage.saveCircuitData(CircuitId.StateTransition, {\n      circuitId: CircuitId.StateTransition,\n      wasm: await loader.load(`${CircuitId.StateTransition.toString()}/circuit.wasm`),\n      provingKey: await loader.load(`${CircuitId.StateTransition.toString()}/circuit_final.zkey`),\n      verificationKey: await loader.load(\n        `${CircuitId.StateTransition.toString()}/verification_key.json`\n      )\n    });\n\n    return new ProofService(identityWallet, credentialWallet, circuitStorage, stateStorage);\n\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 ",(0,r.kt)("i",null,"CircuitStorage ")," Contains proving key of state transition circuit which is need for proof generation")))}u.isMDXComponent=!0}}]);