"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[135],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(a),m=n,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return a?r.createElement(g,i(i({ref:t},p),{},{components:a})):r.createElement(g,i({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8912:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const l={id:"polygonid-js-sdk.icredentialwallet.getrevocationstatus",title:"ICredentialWallet.getRevocationStatus() method",hide_title:!0},i=void 0,o={unversionedId:"api/polygonid-js-sdk.icredentialwallet.getrevocationstatus",id:"api/polygonid-js-sdk.icredentialwallet.getrevocationstatus",title:"ICredentialWallet.getRevocationStatus() method",description:"ICredentialWallet.getRevocationStatus() method",source:"@site/docs/api/polygonid-js-sdk.icredentialwallet.getrevocationstatus.md",sourceDirName:"api",slug:"/api/polygonid-js-sdk.icredentialwallet.getrevocationstatus",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.icredentialwallet.getrevocationstatus",draft:!1,tags:[],version:"current",frontMatter:{id:"polygonid-js-sdk.icredentialwallet.getrevocationstatus",title:"ICredentialWallet.getRevocationStatus() method",hide_title:!0},sidebar:"api",previous:{title:"ICredentialWallet.getAuthBJJCredential() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.icredentialwallet.getauthbjjcredential"},next:{title:"ICredentialWallet.getRevocationStatusFromCredential() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.icredentialwallet.getrevocationstatusfromcredential"}},s={},d=[{value:"ICredentialWallet.getRevocationStatus() method",id:"icredentialwalletgetrevocationstatus-method",level:2},{value:"Parameters",id:"parameters",level:2}],p={toc:d};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"icredentialwalletgetrevocationstatus-method"},"ICredentialWallet.getRevocationStatus() method"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.")),(0,n.kt)("p",null,"Fetches Revocation status depended on type"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Signature:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"getRevocationStatus(credStatus: CredentialStatus | RHSCredentialStatus, issuerDID: DID, issuerData: IssuerData): Promise<RevocationStatus>;\n")),(0,n.kt)("h2",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"credStatus"),(0,n.kt)("td",{parentName:"tr",align:null},"CredentialStatus ","|"," RHSCredentialStatus"),(0,n.kt)("td",{parentName:"tr",align:null},"credentialStatus field of the Verifiable Credential. Supported types for credentialStatus field: SparseMerkleTreeProof, Iden3ReverseSparseMerkleTreeProof")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"issuerDID"),(0,n.kt)("td",{parentName:"tr",align:null},"DID"),(0,n.kt)("td",{parentName:"tr",align:null},"credential issuer identity")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"issuerData"),(0,n.kt)("td",{parentName:"tr",align:null},"IssuerData"),(0,n.kt)("td",{parentName:"tr",align:null},"metadata of the issuer, usually contained in the BjjSignature / Iden3SparseMerkleTreeProof")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns:")),(0,n.kt)("p",null,"Promise","<","RevocationStatus",">"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Promise<RevocationStatus>")))}u.isMDXComponent=!0}}]);