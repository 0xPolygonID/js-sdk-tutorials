"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[82306],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>b});var a=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,a,i=function(e,r){if(null==e)return{};var t,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},c=function(e){var r=s(e.components);return a.createElement(l.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},y=a.forwardRef((function(e,r){var t=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(t),y=i,b=u["".concat(l,".").concat(y)]||u[y]||d[y]||n;return t?a.createElement(b,p(p({ref:r},c),{},{components:t})):a.createElement(b,p({ref:r},c))}));function b(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var n=t.length,p=new Array(n);p[0]=y;var o={};for(var l in r)hasOwnProperty.call(r,l)&&(o[l]=r[l]);o.originalType=e,o[u]="string"==typeof e?e:i,p[1]=o;for(var s=2;s<n;s++)p[s]=t[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},558:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>n,metadata:()=>o,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const n={id:"polygonid-js-sdk.preparecircuitarrayvalues",title:"prepareCircuitArrayValues variable",hide_title:!0},p=void 0,o={unversionedId:"api/polygonid-js-sdk.preparecircuitarrayvalues",id:"api/polygonid-js-sdk.preparecircuitarrayvalues",title:"prepareCircuitArrayValues variable",description:"prepareCircuitArrayValues variable",source:"@site/docs/api/polygonid-js-sdk.preparecircuitarrayvalues.md",sourceDirName:"api",slug:"/api/polygonid-js-sdk.preparecircuitarrayvalues",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.preparecircuitarrayvalues",draft:!1,tags:[],version:"current",frontMatter:{id:"polygonid-js-sdk.preparecircuitarrayvalues",title:"prepareCircuitArrayValues variable",hide_title:!0},sidebar:"api",previous:{title:"PlainPackerParams type",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.plainpackerparams"},next:{title:"prepareSiblingsStr variable",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.preparesiblingsstr"}},l={},s=[{value:"prepareCircuitArrayValues variable",id:"preparecircuitarrayvalues-variable",level:2}],c={toc:s};function u(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"preparecircuitarrayvalues-variable"},"prepareCircuitArrayValues variable"),(0,i.kt)("p",null,"PrepareCircuitArrayValues padding values to size. Validate array size and throw an exception if array is bigger than size if array is bigger, circuit cannot compile because number of inputs does not match"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"prepareCircuitArrayValues: (arr: bigint[], size: number) => bigint[]\n")))}u.isMDXComponent=!0}}]);