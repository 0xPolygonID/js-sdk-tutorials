"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[2021],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),g=o,f=u["".concat(s,".").concat(g)]||u[g]||p[g]||i;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7319:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:4},a="generate sig / mtp proofs",c={unversionedId:"tutorial-basics/generate proofs",id:"tutorial-basics/generate proofs",title:"generate sig / mtp proofs",description:"Credential is issued to the user with a BJJ signature proof, so we can generate a zkp that we have such credentials!!",source:"@site/docs/tutorial-basics/generate proofs.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/generate proofs",permalink:"/polygonid-js-sdk-website/docs/tutorial-basics/generate proofs",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"transit state",permalink:"/polygonid-js-sdk-website/docs/tutorial-basics/transit-state"},next:{title:"Handle authorization request",permalink:"/polygonid-js-sdk-website/docs/tutorial-basics/auth-handler"}},s={},l=[{value:"init circuit storage with mtp / sig data",id:"init-circuit-storage-with-mtp--sig-data",level:3},{value:"signature proof request",id:"signature-proof-request",level:3},{value:"mtp proof request",id:"mtp-proof-request",level:3}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generate-sig--mtp-proofs"},"generate sig / mtp proofs"),(0,o.kt)("p",null,"Credential is issued to the user with a BJJ signature proof, so we can generate a zkp that we have such credentials!!"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"codebase can be changed. Still in @beta")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'async function generateProofs() {\n  console.log("=============== transit state ===============");\n\n  const dataStorage = initDataStorage();\n  const credentialWallet = await initCredentialWallet(dataStorage);\n  const identityWallet = await initIdentityWallet(\n    dataStorage,\n    credentialWallet\n  );\n  const proofService = await initProofService(identityWallet,credentialWallet,dataStorage.states)\n\n  const { did:userDID, credential:authBJJCredentialUser } =\n    await identityWallet.createIdentity(\n      "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n      "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n      {\n        method: core.DidMethod.Iden3,\n        blockchain: core.Blockchain.Polygon,\n        networkId: core.NetworkId.Mumbai,\n      }\n    );\n\n  console.log("=============== user did ===============");\n  console.log(userDID.toString());\n\n  const { did:issuerDID, credential:issuerAuthBJJCredential } =\n    await identityWallet.createIdentity(\n      "http://metamask.com/", // this is url that will be a part of auth bjj credential identifier\n      "https://rhs-staging.polygonid.me", // url to check revocation status of auth bjj credential\n      {\n        method: core.DidMethod.Iden3,\n        blockchain: core.Blockchain.Polygon,\n        networkId: core.NetworkId.Mumbai,\n      }\n    );\n\n  const credentialRequest: CredentialRequest = {\n    credentialSchema:\n      "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json/KYCAgeCredential-v3.json",\n    type: "KYCAgeCredential",\n    credentialSubject: {\n      id: userDID.toString(),\n      birthday: 19960424,\n      documentType: 99,\n    },\n    expiration: 12345678888,\n  };\n  const credential = await identityWallet.issueCredential(\n    issuerDID,\n    credentialRequest,\n    "http://metamask.com/", // host url that will a prefix of credential identifier\n    {\n      withRHS: "https://rhs-staging.polygonid.me", // reverse hash service is used to check\n    }\n  );\n\n\n  dataStorage.credential.saveCredential(credential)\n\n\n  console.log("================= generate Iden3SparseMerkleTreeProof =======================")\n\n  const res = await identityWallet.addCredentialsToMerkleTree([credential], issuerDID);\n\n  console.log("================= push states to rhs ===================")\n\n  await identityWallet.publishStateToRHS(issuerDID, "https://rhs-staging.polygonid.me");\n\n  console.log("================= publish to blockchain ===================")\n\n  const ethSigner = new ethers.Wallet(\'08562dec34e81fbc26f719048efb075f217bf911521d4e674cf7b7ad51f989eb\',(dataStorage.states as EthStateStorage).provider);\n  const txId = await proofService.transitState(\n    issuerDID,\n    res.oldTreeState,\n    true,\n    dataStorage.states,\n    ethSigner\n  );\n  console.log(txId)\n\n  console.log("================= generate credentialAtomicSigV2 ===================")\n\n  const proofReqSig: ZeroKnowledgeProofRequest = {\n    id: 1,\n    circuitId: CircuitId.AtomicQuerySigV2,\n    optional: false,\n    query: {\n      allowedIssuers: [\'*\'],\n      type: credentialRequest.type,\n      context:\n        \'https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\',\n      req: {\n        documentType: {\n          $eq: 99\n        }\n      }\n    }\n  };\n\n  const { proof } = await proofService.generateProof(proofReqSig, userDID);\n\n  console.log(JSON.stringify(proof));\n  const sigProofOk = await proofService.verifyProof(proof, CircuitId.AtomicQuerySigV2);\n  console.log("valid: ", sigProofOk);\n\n\n\n\n  console.log("================= generate credentialAtomicMTPV2 ===================")\n\n\n    const credsWithIden3MTPProof = await identityWallet.generateIden3SparseMerkleTreeProof(\n      issuerDID,\n      res.credentials,\n      txId\n    );\n\n    console.log(credsWithIden3MTPProof)\n    credentialWallet.saveAll(credsWithIden3MTPProof);\n\n    const proofReqMtp: ZeroKnowledgeProofRequest = {\n      id: 1,\n      circuitId: CircuitId.AtomicQueryMTPV2,\n      optional: false,\n      query: {\n        allowedIssuers: [\'*\'],\n        type: credentialRequest.type,\n        context:\n          \'https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld\',\n        req: {\n          documentType: {\n            $eq: 99\n          }\n        }\n      }\n    };\n\n    const { proof:proofMTP } = await proofService.generateProof(proofReqMtp, userDID);\n    console.log(JSON.stringify(proofMTP));\n    const mtpProofOk = await proofService.verifyProof(proof, CircuitId.AtomicQueryMTPV2);\n    console.log("valid: ", mtpProofOk);\n\n}\n')),(0,o.kt)("h3",{id:"init-circuit-storage-with-mtp--sig-data"},"init circuit storage with mtp / sig data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"async function initProofService(\n    identityWallet:IIdentityWallet,\n    credentialWallet:ICredentialWallet,\n    stateStorage:IStateStorage\n) :Promise<ProofService>{\n    const circuitStorage = new CircuitStorage(new InMemoryDataSource<CircuitData>());\n\n    const loader = new FSKeyLoader(path.join(__dirname, '../testdata'));\n\n    await circuitStorage.saveCircuitData(CircuitId.AtomicQuerySigV2, {\n      circuitId: CircuitId.AtomicQuerySigV2,\n      wasm: await loader.load(`${CircuitId.AtomicQuerySigV2.toString()}/circuit.wasm`),\n      provingKey: await loader.load(`${CircuitId.AtomicQuerySigV2.toString()}/circuit_final.zkey`),\n      verificationKey: await loader.load(\n        `${CircuitId.AtomicQuerySigV2.toString()}/verification_key.json`\n      )\n    });\n\n    await circuitStorage.saveCircuitData(CircuitId.StateTransition, {\n      circuitId: CircuitId.StateTransition,\n      wasm: await loader.load(`${CircuitId.StateTransition.toString()}/circuit.wasm`),\n      provingKey: await loader.load(`${CircuitId.StateTransition.toString()}/circuit_final.zkey`),\n      verificationKey: await loader.load(\n        `${CircuitId.StateTransition.toString()}/verification_key.json`\n      )\n    });\n\n    await circuitStorage.saveCircuitData(CircuitId.AtomicQueryMTPV2, {\n      circuitId: CircuitId.AtomicQueryMTPV2,\n      wasm: await loader.load(`${CircuitId.AtomicQueryMTPV2.toString()}/circuit.wasm`),\n      provingKey: await loader.load(`${CircuitId.AtomicQueryMTPV2.toString()}/circuit_final.zkey`),\n      verificationKey: await loader.load(\n        `${CircuitId.AtomicQueryMTPV2.toString()}/verification_key.json`\n      )\n    });\n\n    return new ProofService(identityWallet, credentialWallet, circuitStorage, stateStorage);\n\n}\n\n")),(0,o.kt)("h3",{id:"signature-proof-request"},"signature proof request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(\n  "================= generate credentialAtomicSigV2 ==================="\n);\n\nconst proofReqSig: ZeroKnowledgeProofRequest = {\n  id: 1,\n  circuitId: CircuitId.AtomicQuerySigV2,\n  optional: false,\n  query: {\n    allowedIssuers: ["*"],\n    type: credentialRequest.type,\n    context:\n      "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld",\n    req: {\n      documentType: {\n        $eq: 99,\n      },\n    },\n  },\n};\n\nconst { proof } = await proofService.generateProof(proofReqSig, userDID);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 ",(0,o.kt)("i",null,"ZeroKnowledgeProofRequest ")," is a protocol proof request, in this case for credential with a BJJ signature proof")),(0,o.kt)("h3",{id:"mtp-proof-request"},"mtp proof request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(\n  "================= generate credentialAtomicSigV2 ==================="\n);\n\nconst proofReqMtp: ZeroKnowledgeProofRequest = {\n  id: 1,\n  circuitId: CircuitId.AtomicQueryMTPV2,\n  optional: false,\n  query: {\n    allowedIssuers: ["*"],\n    type: credentialRequest.type,\n    context:\n      "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld",\n    req: {\n      documentType: {\n        $eq: 99,\n      },\n    },\n  },\n};\n\nconst { proof } = await proofService.generateProof(proofReqSig, userDID);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 ",(0,o.kt)("i",null,"ZeroKnowledgeProofRequest ")," is a protocol proof request, in this case for credential with a Iden3SparseMerkleTreeProof")))}u.isMDXComponent=!0}}]);