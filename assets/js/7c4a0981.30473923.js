"use strict";(self.webpackChunkpolygonid_js_sdk_website=self.webpackChunkpolygonid_js_sdk_website||[]).push([[5893],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(n),k=r,g=c["".concat(d,".").concat(k)]||c[k]||y[k]||i;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},7788:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={id:"polygonid-js-sdk.iidentitywallet",title:"IIdentityWallet interface",hide_title:!0},l=void 0,o={unversionedId:"api/polygonid-js-sdk.iidentitywallet",id:"api/polygonid-js-sdk.iidentitywallet",title:"IIdentityWallet interface",description:"IIdentityWallet interface",source:"@site/docs/api/polygonid-js-sdk.iidentitywallet.md",sourceDirName:"api",slug:"/api/polygonid-js-sdk.iidentitywallet",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet",draft:!1,tags:[],version:"current",frontMatter:{id:"polygonid-js-sdk.iidentitywallet",title:"IIdentityWallet interface",hide_title:!0},sidebar:"api",previous:{title:"IIdentityWallet.issueCredential() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.issuecredential"},next:{title:"IIdentityWallet.publishStateToRHS() method",permalink:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.publishstatetorhs"}},d={},s=[{value:"IIdentityWallet interface",id:"iidentitywallet-interface",level:2},{value:"Methods",id:"methods",level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"iidentitywallet-interface"},"IIdentityWallet interface"),(0,r.kt)("p",null,"Interface for IdentityWallet"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface IIdentityWallet \n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.addcredentialstomerkletree"},"addCredentialsToMerkleTree(credentials, issuerDID)")),(0,r.kt)("td",{parentName:"tr",align:null},"Adds verifiable credentials to issuer Claims Merkle tree")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.createidentity"},"createIdentity(hostUrl, rhsUrl, seed)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"(BETA)"))," Create Identity creates Auth BJJ credential, Merkle trees for claims, revocations and root of roots, adds auth BJJ credential to claims tree and generates mtp of inclusion based on the resulting state it provides an identifier in DID form.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.createprofile"},"createProfile(did, nonce, verifier)")),(0,r.kt)("td",{parentName:"tr",align:null},"Creates profile based on genesis identifier")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.generatecredentialmtp"},"generateCredentialMtp(did, credential, treeState)")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates proof of credential inclusion / non-inclusion to the given claims tree and its root or to the current root of the Claims tree in the given Merkle tree storage.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.generateiden3sparsemerkletreeproof"},"generateIden3SparseMerkleTreeProof(issuerDID, credentials, txId, blockNumber, blockTimestamp)")),(0,r.kt)("td",{parentName:"tr",align:null},"Generate Iden3SparseMerkleTree proof of inclusion to issuer state of specific credentials")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.generatekey"},"generateKey(keyType)")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a new key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.generatenonrevocationmtp"},"generateNonRevocationMtp(did, credential, treeState)")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates proof of credential revocation nonce inclusion / non-inclusion to the given revocation tree and its root or to the current root of the Revocation tree in the given Merkle tree storage.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.getdidtreestate"},"getDIDTreeState(did)")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets a tree model for given did that includes claims tree, revocation tree, the root of roots tree and calculated state hash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.issuecredential"},"issueCredential(issuerDID, req, hostUrl, opts)")),(0,r.kt)("td",{parentName:"tr",align:null},"Issues new credential from issuer according to the claim request")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.publishstatetorhs"},"publishStateToRHS(issuerDID, rhsURL, revokedNonces)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.revokecredential"},"revokeCredential(issuerDID, credential)")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.sign"},"sign(payload, credential)")),(0,r.kt)("td",{parentName:"tr",align:null},"Signs a payload of arbitrary size with an Auth BJJ Credential that identifies a key for signing.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/polygonid-js-sdk-website/docs/api/polygonid-js-sdk.iidentitywallet.signchallenge"},"signChallenge(payload, credential)")),(0,r.kt)("td",{parentName:"tr",align:null},"Signs a big integer with an Auth BJJ Credential that identifies a key for signing.")))))}c.isMDXComponent=!0}}]);